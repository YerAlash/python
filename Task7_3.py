# 3. Реализовать программу работы с органическими клетками. Необходимо создать
# класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения до
# целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить
# соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки
# определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки
# определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр
# класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки
# по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество
# ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, num):
        self.num = num

    def __add__(self, other):
        return Cell(self.num + other.num)

    def __sub__(self, other):
        if self.num < other.num:
            return "Разность количества ячеек двух клеток меньше нуля!"
        else:
            return Cell(self.num - other.num)

    def __mul__(self, other):
        return Cell(self.num * other.num)

    def __truediv__(self, other):
        return Cell(int(self.num / other.num))

    def __str__(self):
        return f"Клетка с {self.num} ячейками"

    def make_order(self, ord_count):
        res_str = ''
        for count in range(self.num // ord_count):
            res_str = res_str + '*' * ord_count + '\n'
        res_str = res_str + '*' * (self.num % ord_count)
        return res_str

try:
    cell_1 = Cell(int(input('Введите число ячеек в 1-клетке: ')))
    cell_2 = Cell(int(input('Введите число ячеек во 2-клетке: ')))
    print()
    print(cell_1);
    print(cell_2);

    print(f"Сложение: {cell_1 + cell_2}")
    print(f"Вычитание: {cell_1 - cell_2}")
    print(f"Умножение: {cell_1 * cell_2}")
    print(f"Деление: {cell_1 / cell_2}\n")

    print(cell_1.make_order(int(input(
        'Введите количество ячеек в ряду для 1-клетки: '))))
    print(cell_2.make_order(int(input(
        'Введите количество ячеек в ряду для 2-клетки: '))))
except ValueError:
    print('Введите целое число!')
